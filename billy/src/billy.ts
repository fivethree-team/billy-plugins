import { App, Lane } from "@fivethree/billy-core";
import { Application } from "./generated/application";
import { MarkdownTableHeader } from "@fivethree/billy-plugin-markdown/dist/plugin";

export const plugins = [{
    name: 'Markdown',
    path: '../markdown',
    docPath: './markdown'
}]

@App()
export class Billy extends Application {

    @Lane('Generate Readme ðŸ‘¾')
    async generateReadme() {
        const content: string[] = [];
        content.push(this.mdComment('Auto Generated Below'));
        content.push('');
        content.push(this.mdH2('Plugins'));

        const headers: MarkdownTableHeader[] = [
            {
                key: 'name',
                title: 'Plugin'
            },
            {
                key: 'docPath',
                title: 'Documentation'
            },
        ];

        const mappedPlugins = plugins.map(plugin => {
            plugin.docPath = this.mdUrl(plugin.docPath, 'Readme');
            return plugin;
        })

        content.push(this.mdTable(headers, mappedPlugins));

        let readmeContent = this.readText('../README.md');

        const autoGeneratedContentIndex = readmeContent.indexOf(this.mdComment('Auto Generated Below'));
        if (autoGeneratedContentIndex > -1) {
            readmeContent = readmeContent.substring(0, autoGeneratedContentIndex);
        }

        this.writeText('../README.md', readmeContent + this.mdJoinContent(content));
    }

    @Lane('Generate Plugins Readme ðŸ‘¾')
    async generatePluginsReadme() {

    }

    @Lane('Publish @fivethree/billy-plugin-markdown')
    async publishMarkdownPlugin() {
        await this.updatePluginVersion('../markdown');
        await this.publishPlugin('../markdown');
    }

    private async publishPlugin(path: string) {
        await this.exec(`cd ${path} && npm run build && npm publish`, true);
    }

    private async updatePluginVersion(path: string) {
        const answer = await this.prompt([
            {
                type: 'list',
                name: 'update',
                message: 'Which version do you want to update the Markdown Plugin too?',
                choices: [
                    { name: 'Patch', value: 0 },
                    { name: 'Minor', value: 1 },
                ]
            }
        ]);

        switch (answer.update) {
            case 0:
                await this.exec(`cd ${path} && npm version patch`, true);
                break;
            case 1:
                await this.exec(`cd ${path} && npm version minor`, true);
                break;
        }
    }
}



